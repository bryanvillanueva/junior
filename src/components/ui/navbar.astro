---
interface Props {
  textClass?: string;
}

interface Link {
  href: string;
  label: string;
  icon: string;
}

// Recibir la prop textClass desde la p√°gina
const { textClass = "text-white" } = Astro.props;

// üîß Ajusta aqu√≠ el tama√±o del logo (en px)
const logoHeight = 56;

// Funci√≥n para obtener el icono SVG
function getIcon(iconName: string): string {
  const icons: Record<string, string> = {
    home: '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/><polyline stroke-linecap="round" stroke-linejoin="round" stroke-width="2" points="9,22 9,12 15,12 15,22"/></svg>',
    users:
      '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"/><circle stroke-linecap="round" stroke-linejoin="round" stroke-width="2" cx="9" cy="7" r="4"/></svg>',
    trophy:
      '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 9H4.5a2.5 2.5 0 0 1 0-5H6m0 5a2.5 2.5 0 0 1 0-5m0 5v13a2.5 2.5 0 0 0 5 0V9m0 0a2.5 2.5 0 0 0 0-5m0 5H18m0-5a2.5 2.5 0 0 1 0 5m0-5H19.5a2.5 2.5 0 0 0 0 5H18m0 0v13a2.5 2.5 0 0 1-5 0V9"/></svg>',
    "book-open":
      '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"/><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"/></svg>',
    "map-pin":
      '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"/><circle stroke-linecap="round" stroke-linejoin="round" stroke-width="2" cx="12" cy="10" r="3"/></svg>',
    handshake:
      '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m11 17 2 2a1 1 0 1 0 3-3l-2.5-2.5a1 1 0 1 1 3-3l3 3 2-2a1 1 0 0 1 3 3L20 21l-2 2"/><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m7 14 2-2a1 1 0 0 0-3-3l-2.5 2.5a1 1 0 0 0 3 3l2 2"/></svg>',
  };
  return icons[iconName] || "";
}

// √çtems definidos con iconos
const left: Link[] = [
  { href: "/", label: "Inicio", icon: "home" },
  { href: "/plantel", label: "Plantel", icon: "users" },
  { href: "/palmares", label: "Palmar√©s", icon: "trophy" },
];
const right: Link[] = [
  { href: "/historia", label: "Historia", icon: "book-open" },
  { href: "/estadios", label: "Estadio", icon: "map-pin" },
  { href: "/sponsor", label: "Patrocinadores", icon: "handshake" },
];
---

<!-- Fondo TRANSPARENTE, posicionado sobre el Hero -->
<header class={`absolute inset-x-0 top-0 z-50 ${textClass}`}>
  <nav class="mx-auto max-w-6xl px-4">
    <div class="grid grid-cols-3 items-center h-16 md:h-20">
      <!-- Izquierda (desktop) -->
      <ul
        class="hidden md:flex items-center gap-8 uppercase text-sm tracking-wide font-semibold"
      >
        {
          left.map((l) => (
            <li>
              <a
                class="hover:opacity-80 transition flex items-center gap-2"
                href={l.href}
              >
                <span set:html={getIcon(l.icon)} />
                {l.label}
              </a>
            </li>
          ))
        }
      </ul>

      <!-- Logo centrado -->
      <a
        href="/"
        class="justify-self-center inline-flex items-center"
        style={`height:${logoHeight}px`}
      >
        <img
          src="/logo.png"
          alt="Junior de Barranquilla"
          style={`height:${logoHeight}px`}
          class="w-auto object-contain"
        />
      </a>

      <!-- Derecha (desktop) -->
      <ul
        class="hidden md:flex items-center gap-8 justify-self-end uppercase text-sm tracking-wide font-semibold"
      >
        {
          right.map((l) => (
            <li>
              <a
                class="hover:opacity-80 transition flex items-center gap-2"
                href={l.href}
              >
                <span set:html={getIcon(l.icon)} />
                {l.label}
              </a>
            </li>
          ))
        }
      </ul>

      <!-- Bot√≥n m√≥vil (solo < md) -->
      <button
        id="nav-toggle"
        class="md:hidden justify-self-end p-2 rounded outline-none"
        aria-label="Abrir men√∫">‚ò∞</button
      >
    </div>

    <!-- Men√∫ m√≥vil (sigue transparente) -->
    <div id="mobile-menu" class="md:hidden hidden pt-2 pb-4">
      <ul class="grid gap-2 uppercase text-sm tracking-wide font-semibold">
        {
          [...left, ...right].map((l) => (
            <li>
              <a class="block py-2 flex items-center gap-2" href={l.href}>
                <span set:html={getIcon(l.icon)} />
                {l.label}
              </a>
            </li>
          ))
        }
      </ul>
    </div>
  </nav>

  <script>
    const btn = document.getElementById("nav-toggle");
    const menu = document.getElementById("mobile-menu");
    btn?.addEventListener("click", () => menu?.classList.toggle("hidden"));
  </script>
</header>
